name: "indexer: build & deploy (prod)"
on:
  push:
    branches:
      - main
    paths:
      - 'main/**'
      - 'macros/**'
      - 'config.yaml'
      - '!*.txt'
env:
  CRATE_DIR: main
  APP_BIN: indexer
  # XXX can't reference env context here, so we have to repeat ourselves
  IMAGE: ${{ github.repository }}/indexer
  TAG: ${{ github.head_ref || github.ref_name }}
  REGISTRY: ghcr.io
  FLY_REGISTRY: registry.fly.io
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  # if we ever need to set this, we also need to fix the step where we discover + copy the binary
#  CARGO_BUILD_TARGET: x86_64-unknown-linux-gnu
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: install deps
        run: sudo apt-get update -q && sudo apt-get install -y -q clang protobuf-compiler
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2023-05-15
      - uses: Swatinem/rust-cache@v2
      - uses: mozilla-actions/sccache-action@v0.0.3
        with:
          version: v0.4.2
      - run: cargo build --release --bin ${{ env.APP_BIN }}
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
      - run: mkdir binaries && mv target/*/${{ env.APP_BIN }} binaries/
      - uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: binaries
  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: binaries
          path: binaries
      - uses: docker/login-action@v2
        with:
          # see: https://github.com/superfly/flyctl/issues/104#issuecomment-614973806
          registry: ${{ env.FLY_REGISTRY }}
          username: ${{ secrets.FLY_API_TOKEN }}
          password: x
      - uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ env.IMAGE }}
      # temp workaround | from: https://github.com/docker/build-push-action#git-context
      # (not sure we need this, but including just in case)
      # Setting up Docker Buildx with docker-container driver is required
      # at the moment to be able to use a subdirectory with Git context
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}"
          build-args: BIN=${{ env.APP_BIN }}
          build-contexts: binaries=binaries
          push: true
          # XXX ${{ steps.meta.outputs.labels }} would be available here, but not sure how to tell it to tag
          # with a registry, let alone multiple; so we do it manually instead
          # for fly.io, we also need to push images for each of the apps we run there
          tags: |
            ${{ env.FLY_REGISTRY }}/${{ env.APP_BIN }}-prod-testnet:${{ env.TAG }}
            ${{ env.FLY_REGISTRY }}/${{ env.APP_BIN }}-prod-mainnet:${{ env.TAG }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy_testnet:
    name: deploy testnet
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy -i ${{ env.FLY_REGISTRY }}/${{ env.APP_BIN }}-prod-${{ env.NET }}net:${{ env.TAG }} ${{ env.CRATE_DIR }} -c fly-prod-${{ env.NET }}net.toml
        env:
          NET: test
  deploy_mainnet:
    name: deploy mainnet
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy -i ${{ env.FLY_REGISTRY }}/${{ env.APP_BIN }}-prod-${{ env.NET }}net:${{ env.TAG }} ${{ env.CRATE_DIR }} -c fly-prod-${{ env.NET }}net.toml
        env:
          NET: main
  deploy_mainnet_fullscanonly:
    name: deploy mainnet (fullscan only)
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy -i ${{ env.FLY_REGISTRY }}/${{ env.APP_BIN }}-prod-${{ env.NET }}net:${{ env.TAG }} ${{ env.CRATE_DIR }} -c fly-prod-${{ env.NET }}net-fullscanonly.toml
        env:
          NET: main
