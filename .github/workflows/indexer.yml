name: (prod) (indexer) build & deploy
on:
  push:
    branches:
      - gha
    paths:
      - 'main/**'
      - 'macros/**'
      - 'config.yaml'
      - '!*.txt'
env:
  CRATE_DIR: main
  APP_BIN: sui-indexer
  # XXX can't reference env context here, so we have to repeat ourselves
  IMAGE: ghcr.io/${{ github.repository }}/sui-indexer
  REGISTRY: ghcr.io
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: install dependencies
        run: sudo apt-get update && sudo apt-get install -y -q clang protobuf-compiler
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
      - uses: mozilla-actions/sccache-action@v0.0.3
        with:
          version: 0.4.2
      - run: cargo build --release --bin ${{ env.APP_BIN }}
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
      - run: mkdir binaries && mv target/release/${{ env.APP_BIN }} binaries/
      - uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ env.IMAGE }}
      # temp workaround | from: https://github.com/docker/build-push-action#git-context
      # (not sure we need this, but including just in case)
      # Setting up Docker Buildx with docker-container driver is required
      # at the moment to be able to use a subdirectory with Git context
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}"
          build-args: BIN=${{ env.APP_BIN }}
          build-contexts: binaries=binaries
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy_testnet:
    name: deploy testnet
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: testnet
        run: flyctl deploy --image ${{ env.IMAGE }} ${{ env.CRATE_DIR }} -c fly-prod-testnet.toml
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  deploy_mainnet:
    name: deploy mainnet
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: mainnet
        run: flyctl deploy --image ${{ env.IMAGE }} ${{ env.CRATE_DIR }} -c fly-prod-mainnet.toml
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
